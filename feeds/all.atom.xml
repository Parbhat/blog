<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Parbhat Puri</title><link href="https://parbhatpuri.com/" rel="alternate"></link><link href="https://parbhatpuri.com/feeds/all.atom.xml" rel="self"></link><id>https://parbhatpuri.com/</id><updated>2018-04-28T20:00:00+05:30</updated><entry><title>A 3-year journey of an Indian remote Software developer</title><link href="https://parbhatpuri.com/a-3-year-journey-of-an-indian-remote-software-developer.html" rel="alternate"></link><published>2018-04-28T20:00:00+05:30</published><updated>2018-04-28T20:00:00+05:30</updated><author><name>Parbhat Puri</name></author><id>tag:parbhatpuri.com,2018-04-28:/a-3-year-journey-of-an-indian-remote-software-developer.html</id><summary type="html">&lt;p&gt;Things I learned by working remotely for three years.&lt;/p&gt;</summary><content type="html">&lt;p&gt;On 13th April 2015 sprints started at &lt;a href="https://us.pycon.org/2015/community/sprints/"&gt;Pycon US&lt;/a&gt; and also my remote internship. I was not attending Pycon US but working remotely from my college hostel. Like every Indian engineering student, I was looking for an internship in my third year of B.tech. Got a positive response from one company but they want it to be remote. Remote sounds good to me and I decided to give it a shot. This remote internship was the first step in my career. My 3-year journey can be divided into:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Remote Intern&lt;/strong&gt;: I applied for the internship in february 2015. After clearing the interview, the internship was scheduled for May - July during my summer vacation. Then I realised why not start the internship now as it is remote. I requested my mentor and he was happy to start the internship during his visit to Pycon US. The internship was supposed to end in July but then I again realised why not continue the internship as it is remote. My mentor was happy to continue it. This is the real benefit of remote working.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Remote Software Developer (part-time) + Freelancer&lt;/strong&gt;: After completing the college, the title changed to Remote Software Developer. One benefit of remote work I like the most is you can work with different companies across the globe. So, I decided to keep working with my previous company on a part-time basis and dive into the world of freelancing. Freelancing sounds cool but it takes time to get some initial clients. I have worked with companies based in the USA and Europe.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Fulltime Freelance Software Developer&lt;/strong&gt;: After having an initial taste of freelancing, I am now working as a Full-time Freelance Software Developer. This has its own pros and cons. Like no fixed monthly income with the benefit of no limit to the income, you can earn.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;center&gt;
&lt;img alt="A macbook laptop, diary, pen and phone on a table." src="https://i.imgur.com/6Z7zCrp.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Image Source: Pixabay
&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;Remote work Mantra&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Communicate&lt;/em&gt; early &lt;em&gt;Communicate&lt;/em&gt; often - repeat it three times.&lt;/p&gt;
&lt;p&gt;Not sure if this is the good way to emphasize the importance of communication in remote work. But communication plays an important role. No matter how good you are as a programmer. If you can not understand the project requirements and communicate with your remote team you can not succeed in the remote world. Some points specific to communication are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Communicate early&lt;/strong&gt;: Great, you got your first project. You received the feature document but wait some things are not clear to you. Early communication is necessary so you do not go in a different direction. Jump to your team communication tool like Slack and discuss early.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Communicate often&lt;/strong&gt;: You have started the feature development work but you are not sure about the coding approach. Again discuss with your team and continue work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Read twice&lt;/strong&gt;: Please read the message again that you just typed before hitting send button. Typos are common but sometimes the meaning from your text can be different from what you want to convey. So, read it twice.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Some learnings and observations&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Contribute to Open Source projects&lt;/strong&gt;: Open Source work is mostly remote work. Open Source projects have a range of contributors working from different time zones. Open Source teaches you important skills like practical coding skills, communication etc. These skills will help you a lot when applying for remote work and day to day activities.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Do not commit if you cannot deliver (Learn to say No)&lt;/strong&gt;: In freelancing, you may get requests for new work when you are fully occupied with work. Do not make false promises to work as you know you will not be able to work with your current schedule. Again comes the communication Mantra. Discuss with the client about your availability. If the work is not urgent, the client will be happy to wait for your availability.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Have a work schedule and not be available 24 X 7&lt;/strong&gt;: People working remotely have a hard time separating work from their personal lives. In case of onsite office work, developers coming out of office close their working day and will again continue next day. Creating such a boundary line in remote work is harder as there is no one to tell you to stop. So, create a work schedule depending on the type of person you are. I am a morning person and do not like to work late at night. So, I work mostly in the daytime. I have clients in vary timezones sometimes with a time difference of 9 hours and 30 minutes. So, work completed by me in the daytime can be reviewed and deployed in my client's daytime. I respond to questions using my phone and jump to laptop only in case of urgent work. So, create a schedule that suits you, discuss it with your clients and do not be available 24 X 7.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Your work is your attendance&lt;/strong&gt;: In case of traditional office setup, a developer presence marks the attendance. But when you are working remotely, your attendance is marked by the commits you push and communication you take part in.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Identifying bad clients&lt;/strong&gt;: There is no full proof method to identify bad clients but I look for some hints in my conversation with clients. Some clients use words like &lt;em&gt;it is very easy&lt;/em&gt; again and again. They use it again and again. With no technical perspective, they make the assumption. One reason may be they are in the search of cheap labour. Better is to avoid these clients to have a peace of mind.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Do not start with freelancing as a beginner&lt;/strong&gt;: Good companies often hire remote freelance developers because they have a limited in-house team or do not have experience with a particular technology. So, they only hire the experienced developers. As a beginner, it is better to start contributing to Open Source projects and find a remote internship.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Do not depend upon freelance marketplaces&lt;/strong&gt;: Platforms like Upwork are great to start but do not depend upon it entirely. Create a portfolio of projects and apply to companies directly you want to work with. Create your online presence so clients can contact you directly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Exercise and eat healthy food&lt;/strong&gt;: We developers have to admit our work is not friendly to our health. Sitting long hours in front of a screen cannot be healthy. So, develop the habit of exercise each day and eat healthy food.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;There are two hard things in freelancing: calculating hourly rates and project estimation&lt;/h3&gt;
&lt;p&gt;A project specification that does not change is very rare. So, working on a project basis makes it harder to have future change requests. Changes in the specification mean you have to estimate the project price again. When you are working alone, this makes it even more problematic. As a freelancer, it is better to work on hourly basis.&lt;/p&gt;
&lt;p&gt;Solving one problem creates another problem - Calculating hourly rates.&lt;/p&gt;
&lt;p&gt;Hourly rates depend on a number of factors like your skills, location etc. In theory, your skills should be the only important factor. But your location also matters. Like the cost of living is very different in the USA than India. So, perform some research on the market value of your skills. And have two hourly rates depending upon commitment duration. For short-term commitment, you should charge high. You can give a discount for long-term commitments.&lt;/p&gt;
&lt;p&gt;You are still here. Thanks for reading my journey. If you have some specific questions, feel free to ask it in the comments below. Happy remote working.&lt;/p&gt;</content><category term="remote"></category><category term="freelance"></category><category term="python"></category><category term="opensource"></category><category term="web"></category><category term="Programming"></category><category term="code"></category></entry><entry><title>Switch to Custom image model in a Production Wagtail project</title><link href="https://parbhatpuri.com/switch-to-custom-image-model-in-a-production-wagtail-project.html" rel="alternate"></link><published>2018-01-22T20:00:00+05:30</published><updated>2018-01-22T20:00:00+05:30</updated><author><name>Parbhat Puri</name></author><id>tag:parbhatpuri.com,2018-01-22:/switch-to-custom-image-model-in-a-production-wagtail-project.html</id><summary type="html">&lt;p&gt;This guide will list the steps to switch from Wagtail Default image model to Custom image model in a production Wagtail project.&lt;/p&gt;</summary><content type="html">&lt;p&gt;A software project is always evolving. New requirements can arise at any stage of the project. One example of a new feature required in a production Wagtail project is to store the &lt;code&gt;source&lt;/code&gt; of the Image. This post will list the steps involved to make the migration from Wagtail default Image model to Custom Image model. Therefore it requires some basic understanding of Wagtail. If you heard about the Wagtail for the first time. You should check it at &lt;a href="http://wagtail.io/"&gt;wagtail.io&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Brief description of the feature&lt;/h3&gt;
&lt;p&gt;Wagtail has a wonderful admin which also allows handling images. Internally wagtail has &lt;code&gt;wagtailimages&lt;/code&gt; app which contains the default Image model. But the fields provided in the default Image model may not be sufficient for your project. Like we want to store the &lt;code&gt;source&lt;/code&gt; of every image and display on our site. Source field is not present in Image model. Fortunately, Wagtail allows switching to custom Image model in which new fields can be added based on the project requirements. In our case, we want to add the source field.&lt;/p&gt;
&lt;h3&gt;Implementation&lt;/h3&gt;
&lt;p&gt;Like Django, Wagtail also has a great documentation. It also has documentation on the &lt;a href="http://docs.wagtail.io/en/stable/advanced_topics/images/custom_image_model.html"&gt;Custom image models&lt;/a&gt;. After following the docs, our project will be switched to Custom Image model with new fields like source. But when we open Images section in Wagtail admin, it will be empty. The reason is mentioned in docs:&lt;/p&gt;
&lt;p&gt;When changing an existing site to use a custom image model, no images will be copied to the new model automatically. Copying old images to the new model would need to be done manually with a data migration.&lt;/p&gt;
&lt;p&gt;So, how much progress we have made?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Switched to custom image model - Yes&lt;/li&gt;
&lt;li&gt;Migrated old data from default image model to Custom image model - No&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;What are data migrations?&lt;/h4&gt;
&lt;p&gt;There are basically two types of migrations in a Django project.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Schema migrations&lt;/strong&gt;: It is the most commonly used and often referred as migrations. These help to change database schema like creating database tables, adding new fields to tables and changing fields etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Data migrations&lt;/strong&gt;: As the name suggests, migrations that alter data are called Data migrations. For example, we add a new field named &lt;code&gt;full_name&lt;/code&gt; to the User model. Schema migrations will create the new field in the database. Data migrations help to combine first_name and last_name of the existing users and store it in the new field named full_name. You can read more in the Django &lt;a href="https://docs.djangoproject.com/en/2.0/topics/migrations/#data-migrations"&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Why we need Data migrations to switch to Custom Image model?&lt;/h4&gt;
&lt;p&gt;In our Wagtail project, we changed the Image model. We created the new model but the image records data is present in old default Image model. To copy images from old to the new model we need to create a data migration which copies the image records. To create data migration:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make an empty migration file&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python manage.py makemigrations --empty yourappname
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Copy the following code to the generated file.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;forwards_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;schema_editor&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# We get the model from the versioned app registry;&lt;/span&gt;
    &lt;span class="n"&gt;wagtail_image_model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;wagtailimages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Image&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# Change the pages with your project&amp;#39;s app name and also model name if different&lt;/span&gt;
    &lt;span class="n"&gt;extended_image_model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ExtendedImage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tagged_item_model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;taggit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;TaggedItem&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;django_content_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;contenttypes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;contenttype&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;db_alias&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;schema_editor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;alias&lt;/span&gt;

    &lt;span class="c1"&gt;# Get images stored in default wagtail image model&lt;/span&gt;
    &lt;span class="n"&gt;images&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wagtail_image_model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_alias&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;new_images&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;images&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;new_images&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;extended_image_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;created_at&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;created_at&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;focal_point_x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;focal_point_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;focal_point_y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;focal_point_y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;focal_point_width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;focal_point_width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;focal_point_height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;focal_point_height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;file_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;file_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;uploaded_by_user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uploaded_by_user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;# Create images in new model&lt;/span&gt;
    &lt;span class="n"&gt;extended_image_model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_alias&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bulk_create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_images&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# Leave all images in previous model&lt;/span&gt;

    &lt;span class="c1"&gt;# Move tags from old image to new image model. Moving tags is&lt;/span&gt;
    &lt;span class="c1"&gt;# a little different case. The lookup table taggit_taggeditem looks like this:&lt;/span&gt;
    &lt;span class="c1"&gt;# id   object_id   content_type_id   tag_id&lt;/span&gt;
    &lt;span class="c1"&gt;# 1    1           10                 1&lt;/span&gt;
    &lt;span class="c1"&gt;# 2    1           10                 2&lt;/span&gt;
    &lt;span class="c1"&gt;# 3    1           10                 3&lt;/span&gt;
    &lt;span class="c1"&gt;# 4    1           10                 4&lt;/span&gt;
    &lt;span class="c1"&gt;# In our case, the object_id will be same for old and new image model&lt;/span&gt;
    &lt;span class="c1"&gt;# objects. So, we have to only change the content_type_id&lt;/span&gt;
    &lt;span class="n"&gt;ct_extended_model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;django_content_type&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_alias&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_or_create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;app_label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;extendedimage&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ct_wagtail_model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;django_content_type&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_alias&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;app_label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;wagtailimages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;image&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;tagged_item_model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_alias&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;content_type_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ct_wagtail_model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;content_type_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ct_extended_model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reverse_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;schema_editor&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# We get the model from the versioned app registry;&lt;/span&gt;
    &lt;span class="n"&gt;extended_image_model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ExtendedImage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tagged_item_model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;taggit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;TaggedItem&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;django_content_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;contenttypes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;contenttype&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;db_alias&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;schema_editor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;alias&lt;/span&gt;

    &lt;span class="c1"&gt;# Move tags from new image model to old wagtail model&lt;/span&gt;
    &lt;span class="n"&gt;ct_extended_model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;django_content_type&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_alias&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;app_label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;extendedimage&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ct_wagtail_model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;django_content_type&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_alias&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;app_label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;wagtailimages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;image&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;tagged_item_model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_alias&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;content_type_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ct_extended_model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;content_type_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ct_wagtail_model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Delete all images created in the new model&lt;/span&gt;
    &lt;span class="n"&gt;extended_image_model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_alias&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;dependencies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="c1"&gt;# Change the following according to your project&lt;/span&gt;
        &lt;span class="c1"&gt;# (&amp;#39;pages&amp;#39;, &amp;#39;0021_auto_20180122_1100&amp;#39;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;wagtailimages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;0019_delete_filter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;operations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RunPython&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forwards_func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reverse_func&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Details about the steps in this data migration&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First, this data migration gets the default Image model objects and create the new Custom Image model objects using &lt;a href="https://docs.djangoproject.com/en/2.0/ref/models/querysets/#bulk-create"&gt;bulk_create&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Migrating Tags&lt;/strong&gt;: Migrating tags is little different than other fields like title. Tags in wagtail work using django-taggit. So, let's use a simple example to understand the concept. This is not the actual model from Django taggit but simplified for this use case.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TaggedItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SlugField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ContentType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CASCADE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;object_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PositiveIntegerField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;content_object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GenericForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;content_type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;object_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Django includes a &lt;a href="https://docs.djangoproject.com/en/2.0/ref/contrib/contenttypes/"&gt;contenttypes&lt;/a&gt; app which can track all of the models installed in your Django-powered project. In this case, the Tags objects point to old Image model using content_type. So, we can filter the TaggedItem model to get the tags used in images and can then update these with the new image model content_type.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;tagged_item_model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_alias&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;content_type_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ct_wagtail_model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;content_type_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ct_extended_model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;content types have various uses like Tags but diving into it further will deviate from the topic of this blog post. Will write a new post on content types.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You may notice we are using &lt;strong&gt;get_or_create&lt;/strong&gt; to get the content type of the new Image model. New instances of ContentType are automatically created whenever new models are installed. But in our case, we have two migrations. The first one create the Schema for new Image model and second one migrate data. You may not encounter the issue running locally but when both the migrations are run during deployment new content types may not be created. In that case, we can create the content type for the new model if not exist.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Issues with PostgreSQL&lt;/h3&gt;
&lt;p&gt;One issue you will encounter if you are using PostgreSQL in your project while uploading new images:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;psycopg2.IntegrityError: duplicate key value violates unique constraint &amp;quot;pages_extendedimage_pkey&amp;quot;
DETAIL:  Key (id)=(1) already exists.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The current key is set to 1 so we have to change it to Max. If your project is using a small number of images say &amp;lt; 10 then you can try uploading again and again and error will be removed when the current key equal to Max. But it is not feasible in case of large number of images. So, in that case, you can run SQL query on your database like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SELECT pg_catalog.setval&lt;span class="o"&gt;(&lt;/span&gt;pg_get_serial_sequence&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pages_extendedimage&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;SELECT MAX&lt;span class="o"&gt;(&lt;/span&gt;id&lt;span class="o"&gt;)&lt;/span&gt; FROM pages_extendedimage&lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;

&lt;p&gt;I have tried to cover all the possible cases encountered by me while migrating a production site to Custom Image model. If you face any issues, feel free to comment below. Thanks for reading.&lt;/p&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/41931590/data-migration-of-image-model"&gt;https://stackoverflow.com/questions/41931590/data-migration-of-image-model&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="wagtail"></category><category term="django"></category><category term="postgres"></category><category term="migrations"></category><category term="opensource"></category><category term="web"></category><category term="Programming"></category><category term="code"></category></entry><entry><title>Add download CSV option in Wagtail modeladmin</title><link href="https://parbhatpuri.com/add-download-csv-option-in-wagtail-modeladmin.html" rel="alternate"></link><published>2017-09-15T18:00:00+05:30</published><updated>2017-09-15T18:00:00+05:30</updated><author><name>Parbhat Puri</name></author><id>tag:parbhatpuri.com,2017-09-15:/add-download-csv-option-in-wagtail-modeladmin.html</id><summary type="html">&lt;p&gt;This guide will list the steps to add download CSV option in Wagtail modeladmin.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://wagtail.io/"&gt;Wagtail&lt;/a&gt; is a free and open source CMS written in Python and built on the &lt;a href="http://djangoproject.com/"&gt;Django&lt;/a&gt; framework. If you heard about the Wagtail for the first time. You should check it out and you will love it.&lt;/p&gt;
&lt;p&gt;The &lt;a href="http://docs.wagtail.io/en/stable/reference/contrib/modeladmin/index.html"&gt;modeladmin&lt;/a&gt; module provided by Wagtail allows to create customisable listing pages for any model in your Wagtail project. Suppose you have a model named &lt;code&gt;EventRegistration&lt;/code&gt;. Django developers are used to performing CRUD operations on this model using the Django admin. The modeladmin module from Wagtail helps to perform CRUD operations from the Wagtail admin interface. Wagtail admin has a great UI and non developers using your project will love it.&lt;/p&gt;
&lt;p&gt;This blog lists the steps to add download &lt;em&gt;CSV&lt;/em&gt; option in Wagtail admin listing view of your model. For the Wagtail users, you may have seen the similar button in the form submissions listing page. You can follow the modeladmin &lt;a href="http://docs.wagtail.io/en/stable/reference/contrib/modeladmin/index.html"&gt;documentation&lt;/a&gt; to register your model and display the model in Wagtail admin. The simplest example is to add the following code in &lt;em&gt;wagtail_hooks.py&lt;/em&gt; file in the app directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wagtail.contrib.modeladmin.options&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;ModelAdmin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;modeladmin_register&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;EventRegistration&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EventRegistrationAdmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ModelAdmin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EventRegistration&lt;/span&gt;
    &lt;span class="n"&gt;menu_label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Event registrations&amp;#39;&lt;/span&gt;  &lt;span class="c1"&gt;# ditch this to use verbose_name_plural from model&lt;/span&gt;
    &lt;span class="n"&gt;menu_icon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;form&amp;#39;&lt;/span&gt;  &lt;span class="c1"&gt;# change as required&lt;/span&gt;
    &lt;span class="n"&gt;menu_order&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;  &lt;span class="c1"&gt;# will put in 3rd place (000 being 1st, 100 2nd)&lt;/span&gt;
    &lt;span class="n"&gt;add_to_settings_menu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;  &lt;span class="c1"&gt;# or True to add your model to the Settings sub-menu&lt;/span&gt;
    &lt;span class="n"&gt;exclude_from_explorer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt; &lt;span class="c1"&gt;# or True to exclude pages of this type from Wagtail&amp;#39;s explorer view&lt;/span&gt;
    &lt;span class="n"&gt;list_display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;example_field2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;example_field3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;register&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;list_filter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;register&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;example_field2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;example_field3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;search_fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;

&lt;span class="c1"&gt;# Now you just need to register your customised EventRegistrationAdmin class with Wagtail&lt;/span&gt;
&lt;span class="n"&gt;modeladmin_register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EventRegistrationAdmin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you can see the &lt;code&gt;Event registrations&lt;/code&gt; menu item in Wagtail admin. When you click on it, you can see the listing page which lists all the event registration entries. The top of the page will be similar to&lt;/p&gt;
&lt;p&gt;&lt;img alt="listing-page-header" src="https://i.imgur.com/mgw4nBP.png"&gt;&lt;/p&gt;
&lt;p&gt;To add &lt;code&gt;Download CSV&lt;/code&gt; button next to search input follow the steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The first step is to override the default IndexView to handle CSV creation at the backend and return CSV file.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils.encoding&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;smart_str&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.auth.decorators&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;login_required&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils.decorators&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;method_decorator&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.exceptions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PermissionDenied&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wagtail.contrib.modeladmin.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;IndexView&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wagtail.contrib.modeladmin.options&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;ModelAdmin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;modeladmin_register&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;EventRegistration&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EventRegistrationCustomIndexView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IndexView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="nd"&gt;@method_decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;login_required&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Only continue if logged in user has list permission&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;permission_helper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_can_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;PermissionDenied&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;action&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;CSV&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

            &lt;span class="c1"&gt;# Get all registrations&lt;/span&gt;
            &lt;span class="n"&gt;registrations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EventRegistration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;data_headings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verbose_name&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;
                             &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;EventRegistration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_meta&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_fields&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;

            &lt;span class="c1"&gt;# Get query parameters. If the user has filtered the list view.&lt;/span&gt;
            &lt;span class="c1"&gt;# Suppose there is a boolean field named register in the model.&lt;/span&gt;
            &lt;span class="n"&gt;registered&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;register__exact&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="c1"&gt;# Filter by registered or not&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;registered&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;registrations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;registrations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;registered&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="c1"&gt;# return a CSV instead&lt;/span&gt;
            &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;text/csv; charset=utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content-Disposition&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;attachment;filename=&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; \
                &lt;span class="s1"&gt;&amp;#39;registrations.csv&amp;#39;&lt;/span&gt;

            &lt;span class="c1"&gt;# Prevents UnicodeEncodeError for labels with non-ansi symbols&lt;/span&gt;
            &lt;span class="n"&gt;data_headings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;smart_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data_headings&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

            &lt;span class="n"&gt;writer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writerow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_headings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;reg&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;registrations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;data_row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
                &lt;span class="n"&gt;data_row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
                    &lt;span class="n"&gt;reg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;example_field2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;example_field3&lt;/span&gt;
                &lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writerow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EventRegistrationCustomIndexView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Now our view can handle CSV download requests. We need to also create the new index view template like &lt;code&gt;event_model_admin_index.html&lt;/code&gt; to display the &lt;code&gt;Download CSV&lt;/code&gt; button.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% extends &amp;quot;modeladmin/index.html&amp;quot; %}
{% load i18n modeladmin_tags %}

{% block header_extra %}
    &lt;span class="c"&gt;&amp;lt;!-- Download CSV --&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{% if request.GET|length == 0 %}?action=CSV{% else %}{{ request.get_full_path }}&amp;amp;amp;action=CSV{% endif %}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;button bicolor icon icon-download&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{% trans &amp;#39;Download CSV&amp;#39; %}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    {{ block.super }}
{% endblock %}
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Now we have the custom &lt;strong&gt;index view&lt;/strong&gt; and &lt;strong&gt;template&lt;/strong&gt; for the event registration. You can customize them further according to your model. We need to add the following attributes to EventRegistrationAdmin class.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EventRegistrationAdmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ModelAdmin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EventRegistration&lt;/span&gt;
    &lt;span class="n"&gt;index_view_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EventRegistrationCustomIndexView&lt;/span&gt;
    &lt;span class="n"&gt;index_template_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;events/event_model_admin_index.html&amp;#39;&lt;/span&gt;
    &lt;span class="o"&gt;....&lt;/span&gt;
    &lt;span class="o"&gt;....&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's it. You can now see a &lt;code&gt;Download CSV&lt;/code&gt; button and can download CSVs.&lt;/p&gt;
&lt;p&gt;&lt;img alt="listing-page-header-csv" src="https://i.imgur.com/K3Olh6P.png"&gt;&lt;/p&gt;
&lt;p&gt;Thanks for reading.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Update&lt;/strong&gt;:&lt;/h2&gt;
&lt;p&gt;I got a message from a Linkedin user that he liked this article and also pointed to &lt;a href="https://stackoverflow.com/questions/46206693/adding-a-button-to-wagtail-dashboard"&gt;this&lt;/a&gt; stackoverflow question. The answer by &lt;code&gt;Loïc Teixeira&lt;/code&gt; uses an alternate approach and better than the above. The difference between the two approaches is: the above approach overrides the same index view to handle CSV logic and the below approach create a new view which is called by a different URL. So, here is the approach which uses the modeladmin &lt;a href="http://docs.wagtail.io/en/stable/reference/contrib/modeladmin/primer.html#overriding-helper-classes"&gt;helper classes&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils.encoding&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;smart_str&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.auth.decorators&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;login_required&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.urlresolvers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils.translation&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ugettext&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils.decorators&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;method_decorator&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.exceptions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PermissionDenied&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wagtail.contrib.modeladmin.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;IndexView&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wagtail.contrib.modeladmin.options&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;ModelAdmin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;modeladmin_register&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wagtail.contrib.modeladmin.helpers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;AdminURLHelper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ButtonHelper&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;EventRegistration&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ExportButtonHelper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ButtonHelper&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    This helper constructs all the necessary attributes to create a button.&lt;/span&gt;

&lt;span class="sd"&gt;    There is a lot of boilerplate just for the classnames to be right :(&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;export_button_classnames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;icon&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;icon-download&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;export_button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;classnames_add&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;classnames_exclude&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;classnames_add&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;classnames_add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;classnames_exclude&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;classnames_exclude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

        &lt;span class="n"&gt;classnames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;export_button_classnames&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;classnames_add&lt;/span&gt;
        &lt;span class="n"&gt;cn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;finalise_classname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;classnames&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;classnames_exclude&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Export {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verbose_name_plural&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url_helper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_action_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;export&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;query_params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;label&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;classname&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ExportAdminURLHelper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AdminURLHelper&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    This helper constructs the different urls.&lt;/span&gt;

&lt;span class="sd"&gt;    This is mostly just to overwrite the default behaviour&lt;/span&gt;
&lt;span class="sd"&gt;    which consider any action other than &amp;#39;create&amp;#39;, &amp;#39;choose_parent&amp;#39; and &amp;#39;index&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;    as `object specific` and will try to add the object PK to the url&lt;/span&gt;
&lt;span class="sd"&gt;    which is not what we want for the `export` option.&lt;/span&gt;

&lt;span class="sd"&gt;    In addition, it appends the filters to the action.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;non_object_specific_actions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;create&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;choose_parent&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;index&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;export&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_action_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;query_params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;query_params&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;url_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_action_url_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;non_object_specific_actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;query_params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;?{params}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;query_params&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlencode&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_action_url_pattern&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;non_object_specific_actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_get_action_url_pattern&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_get_object_specific_action_url_pattern&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ExportView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IndexView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    A Class Based View which will generate CSV&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;export_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;data_headings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verbose_name&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;
                         &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;EventRegistration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_meta&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_fields&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;

        &lt;span class="c1"&gt;# return a CSV instead&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;text/csv; charset=utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content-Disposition&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;attachment;filename=&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; \
            &lt;span class="s1"&gt;&amp;#39;registrations.csv&amp;#39;&lt;/span&gt;

        &lt;span class="c1"&gt;# Prevents UnicodeEncodeError for labels with non-ansi symbols&lt;/span&gt;
        &lt;span class="n"&gt;data_headings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;smart_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data_headings&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="n"&gt;writer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writerow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_headings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;reg&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;data_row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
            &lt;span class="n"&gt;data_row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
                &lt;span class="n"&gt;reg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;example_field2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;example_field3&lt;/span&gt;
            &lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writerow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;

    &lt;span class="nd"&gt;@method_decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;login_required&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;export_csv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ExportModelAdminMixin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    A mixin to add to your model admin which hooks the different helpers, the view and register the new urls.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;button_helper_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ExportButtonHelper&lt;/span&gt;
    &lt;span class="n"&gt;url_helper_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ExportAdminURLHelper&lt;/span&gt;

    &lt;span class="n"&gt;export_view_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ExportView&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_admin_urls_for_registration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;urls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_admin_urls_for_registration&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;urls&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url_helper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_action_url_pattern&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;export&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;export_view&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url_helper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_action_url_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;export&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;urls&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;export_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;kwargs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;model_admin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;view_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;export_view_class&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;view_class&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Now use the ExportModelAdminMixin in EventRegistrationAdmin class.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EventRegistrationAdmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ExportModelAdminMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ModelAdmin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EventRegistration&lt;/span&gt;
    &lt;span class="n"&gt;index_template_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;events/event_model_admin_index.html&amp;#39;&lt;/span&gt;
    &lt;span class="o"&gt;....&lt;/span&gt;
    &lt;span class="o"&gt;....&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Also update the template to use the button helper.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% extends &amp;quot;modeladmin/index.html&amp;quot; %}

{% block header_extra %}
    {% include &amp;#39;modeladmin/includes/button.html&amp;#39; with button=view.button_helper.export_button %}
    {{ block.super }}{% comment %}Display the original buttons {% endcomment %}
{% endblock %}
&lt;/pre&gt;&lt;/div&gt;</content><category term="wagtail"></category><category term="django"></category><category term="opensource"></category><category term="web"></category><category term="Programming"></category><category term="code"></category></entry><entry><title>Reading code makes you a better Developer</title><link href="https://parbhatpuri.com/reading-code-makes-you-a-better-developer.html" rel="alternate"></link><published>2016-07-06T18:00:00+05:30</published><updated>2016-07-06T18:00:00+05:30</updated><author><name>Parbhat Puri</name></author><id>tag:parbhatpuri.com,2016-07-06:/reading-code-makes-you-a-better-developer.html</id><summary type="html">&lt;p&gt;Reading code written by other developers make you a better developer.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Do you like reading code written by other developers?&lt;/p&gt;
&lt;p&gt;Reading the code written by other programmers makes you a better developer. If you are an average developer, start reading code written by great programmers to improve your coding skills.&lt;/p&gt;
&lt;p&gt;From quite some time, I am realising the importance of reading code. Whenever I was stuck in some task during development, reading the source code of library solves the problem. This also helps when the documentation of the library you are using does not answer you questions. What you should do? The answer is simple open the code of the library, read the relevant part of code and the problem is solved. You may also read the term &lt;strong&gt;"Source code never lies"&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We are lucky as most of the popular projects these days are open source. Reading code of good Open Source projects takes your programming skills to the next level. I am grateful to all great developers who open source their code for the benefit of all. The simple API provided by popular open source projects to developers, have some great code behind it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;
    Reading Open source code can also make you an Open Source contributor.
&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;While reading the source code of an Open Source project, you may find some section of code that could be implemented in a much better way. Great, it's time to pay back to the Open Source world. Read the contributing guidelines of the project and submit Pull request. isn't it great.&lt;/p&gt;
&lt;p&gt;What are you waiting for? Take a cup of coffee, find an Open Source project of your interest like &lt;a href="https://github.com/pallets/flask"&gt;flask&lt;/a&gt; and start spending some great time reading its code.&lt;/p&gt;</content><category term="opensource"></category><category term="web"></category><category term="Programming"></category><category term="code"></category></entry><entry><title>Open Sourcing pelican-blue theme used in this blog</title><link href="https://parbhatpuri.com/open-sourcing-pelican-blue-theme-used-in-this-blog.html" rel="alternate"></link><published>2016-01-18T18:00:00+05:30</published><updated>2016-01-18T18:00:00+05:30</updated><author><name>Parbhat Puri</name></author><id>tag:parbhatpuri.com,2016-01-18:/open-sourcing-pelican-blue-theme-used-in-this-blog.html</id><summary type="html">&lt;p&gt;Responsive theme for Pelican Static Site Generator, Powered by Python Programming language.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This blog is a static site generated by &lt;a href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; Static Site Generator, Powered by &lt;a href="https://python.org/"&gt;Python&lt;/a&gt; Programming language. If you are using Wordpress or any other blogging engine, you should think to move to Static Site Generators like &lt;a href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; or &lt;a href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt;. Static sites are faster, the load time of this blog as tested on &lt;a href="http://tools.pingdom.com/fpt/#!/bT0Pry/https://parbhatpuri.com/"&gt;Pingdom&lt;/a&gt; is &lt;strong&gt;540ms&lt;/strong&gt;. Static Site Generators offer the following benefits.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Speed&lt;/li&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;li&gt;Less Hassle with the server&lt;/li&gt;
&lt;li&gt;Comments can be setup with &lt;a href="https://disqus.com/"&gt;Disqus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Free hosting on Github &lt;a href="https://pages.github.com/"&gt;Pages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://github.com/Parbhat/pelican-blue"&gt;Pelican-Blue&lt;/a&gt; is the Pelican theme used in this blog. The theme is now Open Source and hosted on Github - &lt;a href="https://github.com/Parbhat/pelican-blue"&gt;https://github.com/Parbhat/pelican-blue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="homepage-mobile" src="https://i.imgur.com/SfSvZ7X.png"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;Features&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Responsive (Mobile Friendly Test on &lt;a href="https://search.google.com/search-console/mobile-friendly?id=9T_RtZq8rvowsGrbPF7Fsw"&gt;Google&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fast (Load time tested on &lt;a href="http://tools.pingdom.com/fpt/#!/bT0Pry/https://parbhatpuri.com/"&gt;Pingdom&lt;/a&gt;: 540ms)&lt;/li&gt;
&lt;li&gt;Syntax highlighting for code blocks&lt;/li&gt;
&lt;li&gt;&lt;a href="https://disqus.com/"&gt;Disqus&lt;/a&gt; for Comments&lt;/li&gt;
&lt;li&gt;Google Analytics&lt;/li&gt;
&lt;li&gt;RSS/ATOM feeds&lt;/li&gt;
&lt;li&gt;Easy to install&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Installation&lt;/h3&gt;
&lt;p&gt;You can install Pelican-Blue theme to your earlier Pelican project or create a new project from the Pelican &lt;a href="http://docs.getpelican.com/en/3.6.3/quickstart.html"&gt;Quickstart&lt;/a&gt; guide.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Clone the repository&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    $ git clone https://github.com/Parbhat/pelican-blue.git
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Create a THEME variable in your pelicanconf.py file and set its value to the location of pelican-blue theme.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;path-to-pelican-blue-theme&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you have placed the pelican-blue theme inside your project's pelican-themes folder, change the THEME variable in pelicanconf.py to&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pelican-themes/pelican-blue&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Add the following code to your pelicanconf.py file to display the social icons.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;SOCIAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;linkedin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://www.linkedin.com/in/username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;github&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://github.com/username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;twitter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://twitter.com/username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;That's it! You have installed pelican-blue. To see the Theme in action run the devserver&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    make devserver
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you are new to Pelican Static Site Generator, you can read the Pelican &lt;a href="http://docs.getpelican.com/en/stable/"&gt;Docs&lt;/a&gt; to learn the working of Pelican. You can also customize the theme after reading the documentation.&lt;/p&gt;
&lt;h3&gt;Settings&lt;/h3&gt;
&lt;h4&gt;pelicanconf.py&lt;/h4&gt;
&lt;p&gt;Pelican-Blue theme use the following settings. You can add the following to your pelicanconf.py to get the site shown in the screenshots.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;SIDEBAR_DIGEST&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Programmer and Web Developer&amp;#39;&lt;/span&gt;

    &lt;span class="n"&gt;FAVICON&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;url-to-favicon&amp;#39;&lt;/span&gt;

    &lt;span class="n"&gt;DISPLAY_PAGES_ON_MENU&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="n"&gt;TWITTER_USERNAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;twitter-user-name&amp;#39;&lt;/span&gt;

    &lt;span class="n"&gt;MENUITEMS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Blog&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SITEURL&lt;/span&gt;&lt;span class="p"&gt;),)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When developing locally, set the following variable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;SITEURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://localhost:8000&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;publishconf.py&lt;/h4&gt;
&lt;p&gt;When you are ready to publish your site add the following settings to publishconf.py file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;SITEURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://your-domain-address&amp;#39;&lt;/span&gt;

    &lt;span class="n"&gt;FEED_ALL_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;feeds/all.atom.xml&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;CATEGORY_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;feeds/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;.atom.xml&amp;#39;&lt;/span&gt;

    &lt;span class="n"&gt;MENUITEMS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Blog&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SITEURL&lt;/span&gt;&lt;span class="p"&gt;),)&lt;/span&gt;

    &lt;span class="n"&gt;DISQUS_SITENAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;GOOGLE_ANALYTICS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For more information on publishing your site, read the publishing &lt;a href="http://docs.getpelican.com/en/stable/publish.html"&gt;docs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks for reading.&lt;/p&gt;</content><category term="opensource"></category><category term="web"></category><category term="Programming"></category><category term="html"></category><category term="python"></category><category term="pelican"></category></entry><entry><title>Git workflow to contribute to an Open Source project</title><link href="https://parbhatpuri.com/git-workflow-to-contribute-to-an-open-source-project.html" rel="alternate"></link><published>2015-08-02T18:00:00+05:30</published><updated>2015-08-02T18:00:00+05:30</updated><author><name>Parbhat Puri</name></author><id>tag:parbhatpuri.com,2015-08-02:/git-workflow-to-contribute-to-an-open-source-project.html</id><summary type="html">&lt;p&gt;Git workflow to contribute to an Open Source project and improve your skills.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Open Source is the way by which great projects are built. This is made possible by people like you who give their precious time to the community and great stuff is built. So you may be a beginner and wants to contribute to Open Source projects. This article will guide you to contribute to Open Source projects hosted on Collaboration platform &lt;a target="_blank" href="https://github.com"&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="Github" src="https://i.imgur.com/IXBmJj4.jpg"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;This summer I was working as an Intern with &lt;a target="_blank" href="http://chrisdev.com/"&gt;ChrisDev&lt;/a&gt;. The company is one of the corporate members of the &lt;a target="_blank" href="https://www.djangoproject.com/foundation/corporate-members/"&gt;Django&lt;/a&gt; Web Framework. The company works with open source technologies like Python/Django, Pandas, Postgresql, Ansible, Linux, etc. The company has a number of open source projects hosted on &lt;a target="_blank" href="https://github.com/chrisdev"&gt;Github&lt;/a&gt; and Pypi. I worked on a cookiecutter in Django. The project Url is- &lt;a target="_blank" href="https://github.com/chrisdev/wagtail-cookiecutter-foundation"&gt;https://github.com/chrisdev/wagtail-cookiecutter-foundation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this article, I will explain the workflow used by me to contribute to this project. The same workflow is applicable to almost any project on Github. &lt;/p&gt;
&lt;h1&gt;Git and Github&lt;/h1&gt;
&lt;hr&gt;

&lt;p&gt;Before continuing I want to clarify the difference between Git and Github. Git is a version control system(VCS) which is a tool to manage the history of our Source Code. GitHub is a hosting service for Git projects.&lt;/p&gt;
&lt;p&gt;I assume you have created an account on &lt;a target="_blank" href="https://github.com/join"&gt;Github&lt;/a&gt; and installed &lt;a target="_blank" href="http://git-scm.com/downloads"&gt;Git&lt;/a&gt; on your System.&lt;/p&gt;
&lt;p&gt;Now tell Git your name and E-mail (used on Github) address.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; $ git config --global user.name &amp;quot;YOUR NAME&amp;quot;
 $ git config --global user.email &amp;quot;YOUR EMAIL ADDRESS&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is an important step to mark your commits to your name and email.&lt;/p&gt;
&lt;h1&gt;Fork a Project&lt;/h1&gt;
&lt;hr&gt;

&lt;p&gt;You can use github explore - &lt;a target="_blank" href="https://github.com/explore"&gt;https://github.com/explore&lt;/a&gt; to find a project that interests you and match your skills. Once you find your cool project to workon, you can make a copy of project to your account. This process is called forking a project to your Github account. On Upper right side of project page on Github, you can see - &lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="Github-fork" src="https://i.imgur.com/P0n6f97.png"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Click on fork to create a copy of project to your account. This creates a separate copy for you to workon.&lt;/p&gt;
&lt;h1&gt;Finding a feature or bug to workon&lt;/h1&gt;
&lt;hr&gt;

&lt;p&gt;Open Source projects always have something to workon and improves with each new release. You can see the issues section to find something you can solve or report a bug. The project managers always welcome new contributors and can guide you to solve the problem. You can find issues in the right section of project page.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="github-issues" src="https://i.imgur.com/czVjpS7.png"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h1&gt;Clone the forked project&lt;/h1&gt;
&lt;hr&gt;

&lt;p&gt;You have forked the project you want to contribute to your github account. To get this project on your development machine we use clone command of git.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; $ git clone https://github.com/&amp;lt;your-account-username&amp;gt;/&amp;lt;your-forked-project&amp;gt;.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you have the project on your local machine.&lt;/p&gt;
&lt;h1&gt;Add a remote (upstream) to original project repository&lt;/h1&gt;
&lt;hr&gt;

&lt;p&gt;Remote means the remote location of project on Github. By cloning, we have a remote called origin which points to your forked repository. Now we will add a remote to the original repository from where we had forked.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; $ cd &amp;lt;your-forked-project-folder&amp;gt;
 $ git remote add upstream https://github.com/&amp;lt;author-account-username&amp;gt;/&amp;lt;project&amp;gt;.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You will see the benefits of adding remote later.&lt;/p&gt;
&lt;h1&gt;Synchronizing your fork&lt;/h1&gt;
&lt;hr&gt;

&lt;p&gt;Open Source projects have a number of contributors who can push code anytime. So it is necessary to make your forked copy equal with the original repository. The remote added above called Upstream helps in this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; $ git checkout master
 $ git fetch upstream
 $ git merge upstream/master
 $ git push origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The last command pushes the latest code to your forked repository on Github. The origin is the remote pointing to your forked repository on github.&lt;/p&gt;
&lt;h1&gt;Create a new branch for a feature or bugfix&lt;/h1&gt;
&lt;hr&gt;

&lt;p&gt;Normally, all repositories have a master branch which is considered to remain stable and all new features should be made in a separate branch and after completion merged into master branch. So we should create a new branch for our feature or bugfix and start working on the issue.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; $ git checkout -b &amp;lt;feature-branch&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will create a new branch out of master branch. Now start working on the problem and commit your changes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; $ git add --all
 $ git commit -m &amp;quot;&amp;lt;commit message&amp;gt;&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first command adds all the files or you can add specific files by removing -a and adding the file names. The second command gives a message to your changes so you can know in future what changes this commit makes. If you are solving an issue on original repository, you should add the issue number like #35 to your commit message. This will show the reference to commits in the issue.&lt;/p&gt;
&lt;h1&gt;Rebase your feature branch with upstream&lt;/h1&gt;
&lt;hr&gt;

&lt;p&gt;It can happen that your feature takes time to complete and other contributors are constantly pushing code. After completing the feature your feature branch should be rebase on latest changes to upstream master branch.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; $ git checkout &amp;lt;feature-branch&amp;gt;
 $ git pull --rebase upstream master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you get the latest commits from other contributors and check that your commits are compatible with the new commits. If there are any conflicts solve them.&lt;/p&gt;
&lt;h1&gt;Squashing Your Commits&lt;/h1&gt;
&lt;hr&gt;

&lt;p&gt;You have completed the feature, but you have made a number of commits which make less sense. You should squash your commits to make good commits.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; $ git rebase -i HEAD~5
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will open an editor which will allow you to squash the commits.&lt;/p&gt;
&lt;h1&gt;Push code and create a Pull request&lt;/h1&gt;
&lt;hr&gt;

&lt;p&gt;Till this point you have a new branch with the feature or bugfix you want in the project you had forked. Now push your new branch to your remote fork on github.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; $ git push origin &amp;lt;feature-branch&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you are ready to help the project by opening a pull request means you now tell the project managers to add the feature or bugfix to original repository. You can open a pull request by clicking on green icon - &lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="github-pullrequest" src="https://i.imgur.com/aGaqAD5.png"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Remember your upstream base branch should be master and source should be your feature branch. Click on create pull request and add a name to your pull request. You can also describe your feature.&lt;/p&gt;
&lt;p&gt;Awesome! You have made your first contribution. If you have any doubts please let me know in the comments.&lt;/p&gt;
&lt;h1&gt;Be Open!&lt;/h1&gt;</content><category term="opensource"></category><category term="web"></category><category term="2015"></category><category term="Programming"></category><category term="git"></category></entry><entry><title>Why you should Open Source your code?</title><link href="https://parbhatpuri.com/why-you-should-open-source-your-code.html" rel="alternate"></link><published>2015-05-27T18:00:00+05:30</published><updated>2015-05-27T18:00:00+05:30</updated><author><name>Parbhat Puri</name></author><id>tag:parbhatpuri.com,2015-05-27:/why-you-should-open-source-your-code.html</id><summary type="html">&lt;p&gt;Open Source your code is the best way to improve your Coding Skills.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Open source your code is the best way to improve your coding Skills. I have seen people who are reluctant to share their code with others because they know their code is messy. By Open Sourcing your code you learn the best practices in Developing higher quality code. In this article, I will share the reasons why Open source your code is the best practice that every Developer should follow. Below is the Github Open Source graph of a Famous Open Source Contributor.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="Github-Graph" src="https://i.imgur.com/Exp1j8B.png"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;The following points highlight the importance of Open Source Code.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Open Source improves your coding skills. The code that is only open to your eyes can be more error prone. When you put your code in public, you test it thoroughly and improve it with recommendations from your team or others.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open Source gives you a good reason to write Good Quality code rather than messy code that is just working and can be broken easily.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you open source some cool project, then you get reviews and contributions from other great Developers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you are a company who is Open Source his code, then You can attract Good Developers to work with you. Great Developers love Open Source World.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You have used many Open Source technologies in your projects like Python, Linux, NodeJS, MongoDB, MySQL. By going Open Source you share your work with the Open Source Community.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Other Developers can also learn from your Good Quality code and improve their skills.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So go ahead and create your profile on &lt;a href="https://github.com" target="_blank"&gt;https://github.com&lt;/a&gt; or any other social coding site and Open Source your projects and start something cool that can benefit the whole Community.&lt;/p&gt;</content><category term="opensource"></category><category term="web"></category><category term="2015"></category><category term="Programming"></category></entry><entry><title>Why you should learn Flask before Django?</title><link href="https://parbhatpuri.com/why-you-should-learn-flask-before-django.html" rel="alternate"></link><published>2015-04-04T18:00:00+05:30</published><updated>2015-04-04T18:00:00+05:30</updated><author><name>Parbhat Puri</name></author><id>tag:parbhatpuri.com,2015-04-04:/why-you-should-learn-flask-before-django.html</id><summary type="html">&lt;p&gt;Flask is a Micro Web framework for Python which is expressive and powerful.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently I explored &lt;a href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt; and loved the simplicity and power of this Microframework. I learned Django as my first Python Web framework, but now I realise that Flask should be the first &lt;a href="https://python.org"&gt;Python&lt;/a&gt; web framework that everyone should learn while entering into the field of Web Development with Python.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="Flask-logo" src="https://i.imgur.com/Os2jtnk.png"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Django is a full stack framework with the batteries included approach making it easy for developers to dive it into Web Applications. But for beginners, for learning the basics of &lt;a href="http://wsgi.readthedocs.org/en/latest/index.html"&gt;WSGI&lt;/a&gt; and Python web development and of dynamic web development, I do not know of any web framework that gives a better introduction to the concepts underlying it than Flask.&lt;/p&gt;
&lt;p&gt;Starting with Flask is so simple that a &lt;em&gt;hello World&lt;/em&gt; Web Application looks like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# from http://flask.pocoo.org/ tutorial&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# take note of this decorator syntax, it&amp;#39;s a common pattern&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello World!&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With only 7 lines of code you have your Web Application running with Flask. From the above &lt;em&gt;Hello World&lt;/em&gt; web application, a developer with no experience building Python Web applications can get Hacking immediately. You should learn flask because - &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Easy to understand&lt;/li&gt;
&lt;li&gt;Extensive documentation&lt;/li&gt;
&lt;li&gt;Built in development server and debugger&lt;/li&gt;
&lt;li&gt;Supports REST&lt;/li&gt;
&lt;li&gt;Code base small you can check the source code.&lt;/li&gt;
&lt;li&gt;No ORM so you can use SQLAlchemy or storm&lt;/li&gt;
&lt;li&gt;Uses Jinja2 templating&lt;/li&gt;
&lt;li&gt;Support other templates like genshi, mako&lt;/li&gt;
&lt;li&gt;Integrated unit testing support&lt;/li&gt;
&lt;li&gt;support for secure cookies (client side sessions)&lt;/li&gt;
&lt;li&gt;Module level integration&lt;/li&gt;
&lt;li&gt;100% WSGI compliant.&lt;/li&gt;
&lt;li&gt;Integration with gevent, twisted, tornado is possible.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Why it should be your first Python Web Framework?&lt;/h2&gt;
&lt;hr&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Flask is more Pythonic than Django because the code of flask Web Application in most cases is more explicit than the Django Web Application code. So it is easy for Python coders to pick up.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Beginners can learn a lot from the well documented Source Code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Flask does include everything you need to start building something more complex than the above &lt;em&gt;Hello World&lt;/em&gt; app. It integrates a templating engine (Jinja2) for you so you don't have to decide whether you would be better off using Genshi, Cheetah or Mako (though you could use). &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The extra work at start to choose components for Flask apps yields more flexibility for developers whose use case doesn't fit a standard ORM, or who need to interoperate with different workflows or templating systems.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Django is a large framework which includes everything, whether you require it or not. So for smaller application Flask can give more performance. &lt;a href="http://httpbin.org/"&gt;httpbin&lt;/a&gt; is a smaller application built with Flask.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Flask also scales well. Pinterest uses Flask for their API. The API Handles over 12 billion requests per day, all in Flask. More information on How Pinterest uses Flask can be found on &lt;a href="https://www.quora.com/What-challenges-has-Pinterest-encountered-with-Flask/answer/Steve-Cohen" target="_blank"&gt; Quora. &lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, New Python developers should try Microframeworks like Flask before moving to large Frameworks like Django. You should definitely use Django after learning the small pieces of Web Applications.&lt;/p&gt;
&lt;h2&gt;Learning Resources&lt;/h2&gt;
&lt;hr&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="http://flask.pocoo.org/docs/0.10/" target="_blank"&gt; Official Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world" target="_blank"&gt;The Flask-Mega Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://exploreflask.com/" target="_blank"&gt;Explore Flask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://code.tutsplus.com/tutorials/an-introduction-to-pythons-flask-framework--net-28822" target="_blank"&gt;Tuts+ - An Introduction to Python’s Flask Framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://maximebf.com/blog/2012/10/building-websites-in-python-with-flask/#.VR-rV-mUfeS" target="_blank"&gt;Building websites in Python with Flask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.udacity.com/course/ud088" target="_blank"&gt;Udacity - Full Stack Foundations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.miguelgrinberg.com/post/designing-a-restful-api-with-python-and-flask" target="_blank"&gt;Designing a RESTful API with Python and Flask&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="flask"></category><category term="django"></category><category term="python"></category><category term="web"></category><category term="2015"></category><category term="Programming"></category></entry><entry><title>What is an API?</title><link href="https://parbhatpuri.com/what-is-an-api.html" rel="alternate"></link><published>2015-03-14T18:00:00+05:30</published><updated>2015-03-14T18:00:00+05:30</updated><author><name>Parbhat Puri</name></author><id>tag:parbhatpuri.com,2015-03-14:/what-is-an-api.html</id><summary type="html">&lt;p&gt;API is Application Programming Interface.&lt;/p&gt;</summary><content type="html">&lt;p&gt;API word has become so common on the web that you find it everywhere from technical blogs to books. I am sure you have heard about Google Maps API, Facebook Graph API, Twitter API. The defination of an API is - &lt;/p&gt;
&lt;p&gt;An application programming interface (API) is a particular set of instructions that programs can follow to communicate with each other. It serves as an interface between different programs and facilitates their interaction, similar to the way the user interface facilitates interaction between humans and computers.&lt;/p&gt;
&lt;p&gt;So what does this means? Suppose I am working on a Web Application and I want to use services of other applications on the web. APIs provides an interface to talk to other applications with our application. For example, Google Maps API allows to Access information about establishments, geographic locations, or prominent points of interest. Facebook Graph API allows us to extend the features provided by facebook to suit our needs, Ex - To Calculate number of likes that are common to a post and page, Mass Responding to Posts on Your Timeline.&lt;/p&gt;
&lt;p&gt;Almost all of the popular services on the web have their APIs available to the developers so that they can build their applications on top it.&lt;/p&gt;
&lt;p&gt;Some of the most popular APIs are :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/maps/" target="_blank"&gt;Google Maps API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/youtube/" target="_blank"&gt;YouTube APIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.flickr.com/services/api/" target="_blank"&gt;Flickr API:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.twitter.com/" target="_blank"&gt;Twitter APIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://affiliate-program.amazon.com/gp/advertising/api/detail/main.html" target="_blank"&gt;Amazon Product Advertising API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;APIs allows developers to integrate remote applications with their own applications. Thus reducing the efforts to write every part of application from scratch. For example, when we purchase something from a website by entering our credit card information, the website uses API to connect to remote application to check whether the information provided by you is correct. Once payment is confirmed, the remote application sends a response to the website that the payment is received and the product can be sold.&lt;/p&gt;
&lt;p&gt;So, there are number of APIs available on the web waiting for you to use them. Find APIs according to your needs and integrate them in your next Cool Application.&lt;/p&gt;</content><category term="api"></category><category term="angularjs"></category><category term="2015"></category><category term="Programming"></category></entry><entry><title>AngularJS Superhero of Single-Page Application (SPA)</title><link href="https://parbhatpuri.com/angularjs-superhero-of-single-page-application.html" rel="alternate"></link><published>2015-01-30T18:00:00+05:30</published><updated>2015-01-30T18:00:00+05:30</updated><author><name>Parbhat Puri</name></author><id>tag:parbhatpuri.com,2015-01-30:/angularjs-superhero-of-single-page-application.html</id><summary type="html">&lt;p&gt;AngularJS is the Superheroic JavaScript MVW Framework for enhancing HTML for Web Apps.&lt;/p&gt;</summary><content type="html">&lt;p&gt;AngularJS is the Superheroic JavaScript MVW Framework for enhancing HTML for Web Apps.
&lt;center&gt;&lt;img alt="Angular-JS-logo" src="https://angularjs.org/img/AngularJS-large.png"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Today's Web Apps are not that Simple, they should offer more-native-app-like experience to the user. The Web Application should not reload the whole page whenever a user request something. First we have to familiar ourself with the concept of Single page application.&lt;/p&gt;
&lt;p&gt;A single-page application (SPA), is a web application that fits on a single web page with the goal of providing a 
more fluid user experience similar to a desktop application. In a SPA, either all necessary code – HTML, 
JavaScript, and CSS – is retrieved with a single page load, or the appropriate resources are dynamically loaded 
with technologies like AJAX and added to the page as necessary, usually in response to user actions. The page does 
not reload at any point in the process, nor does control transfer to another page. Interaction with the single 
page application often involves dynamic communication with the web server behind the scenes.&lt;/p&gt;
&lt;h3&gt;Now, how angularJS fits itself into Single Page Application concept.&lt;/h3&gt;
&lt;p&gt;AngularJS also known as angular is an Open Source Web Application Framework maintained by &lt;strong&gt;Google&lt;/strong&gt;. It helps in
creating rich Internet Applications which are easy to maintain and test. Angular works by first reading the HTML
page, which has embedded into it additional custom tag attributes. Those attributes are interpreted as 
directives telling Angular to bind input or output parts of the page to a model that is represented by standard 
JavaScript variables. The values of those JavaScript variables can be manually set within the code, or retrieved
from static or dynamic JSON resources.&lt;/p&gt;
&lt;p&gt;HTML was not designed for dynamic views, but it is great for declaring static documents. Angular helps to extend
HTML and gives behaviour to HTML which helps in declaring dynamic views in web-applications.&lt;/p&gt;
&lt;p&gt;In my Future posts I will discuss the features of angular like directives, Controllers, Models, Routes, Factories, services etc. The following picture helps to understand the power of angular.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="Angular-JS" src="https://i.imgur.com/U87M5vo.png"&gt;&lt;/center&gt;&lt;/p&gt;</content><category term="Javascript"></category><category term="angularjs"></category><category term="2015"></category><category term="Programming"></category></entry><entry><title>Skills Essential for a Front End Web Developer in 2015</title><link href="https://parbhatpuri.com/skills-essential-for-a-front-end-web-developer-in-2015.html" rel="alternate"></link><published>2015-01-11T11:00:00+05:30</published><updated>2015-01-11T11:00:00+05:30</updated><author><name>Parbhat Puri</name></author><id>tag:parbhatpuri.com,2015-01-11:/skills-essential-for-a-front-end-web-developer-in-2015.html</id><summary type="html">&lt;p&gt;Front End Developers are in great demand in 2015 but with the emergence of new devices and technologies their skills requirement has increased so I am laying out a checklist for your Front End Development skills.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Front End Web Developers are in great demand in 2015 but with the emergence of new devices and technologies their skills requirement has increased so I am laying out a checklist for your Front End Development skills. These skills will help you to land a job as a Front End Developer in 2015.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Front-End-Developer-needed" src="https://i.imgur.com/U1Iev4X.jpg"&gt;&lt;/p&gt;
&lt;p&gt;In the early days of the Internet only Html, CSS and some Javascript were demanded from a Front End Web Developer but in the current scenario, these skills are &lt;strong&gt;not&lt;/strong&gt; enough to call yourself a Good Front End Web Developer. The following skills are in great demand and you must include them in your skills set.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;li&gt;Javascript&lt;/li&gt;
&lt;li&gt;Responsive Web Design&lt;/li&gt;
&lt;li&gt;CSS Frameworks&lt;/li&gt;
&lt;li&gt;Javascript Frameworks&lt;/li&gt;
&lt;li&gt;Version Control&lt;/li&gt;
&lt;li&gt;Web Performance&lt;/li&gt;
&lt;li&gt;Browser Development tools&lt;/li&gt;
&lt;li&gt;Building and Automation tools&lt;/li&gt;
&lt;li&gt;Testing&lt;/li&gt;
&lt;li&gt;Soft skills&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/user/learncodeacademy" target="_blank"&gt;learncode.acedemy&lt;/a&gt; in his &lt;a href="https://www.youtube.com/watch?v=zXqs6X0lzKI" target="_blank"&gt;video&lt;/a&gt; gives a graphical presentation of above skills.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://i.imgur.com/EB3TIdK.png" target="_blank"&gt;&lt;center&gt;&lt;img alt="skills-graph" src="https://i.imgur.com/EB3TIdK.png"&gt;&lt;/center&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now I will give you a brief description of the above skills.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;HTML&lt;/strong&gt; - It is the structural part of the web. It tells the browser the elements in the website, links to css and javascript files.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt; - Cascading style sheets makes the web beautiful. It is responsible for fonts, colors, images and positioning of different elements on the websites.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Javascript&lt;/strong&gt; - Javascript is the programming language which helps in making the web interactive. With the development of NodeJS, JS has become a language of the web. You can make a full stack Web Application with only Javascript and many developers are adopting this technology.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Responsive Web Design&lt;/strong&gt; - Mobile is the future. The number of users of the mobiles is increasing day by day and the larger traffic on the websites is coming from mobile phones. Responsive design means that your website should adjust itself to the device from which it is being viewed and give an appealing look on most devices. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CSS Frameworks&lt;/strong&gt; - Frameworks make the responsive development easier and already contain different classes for the buttons, forms and various elements on the page. It follows industry best practices. Examples are - &lt;a href="http://getbootstrap.com/"&gt;Bootstrap&lt;/a&gt;, &lt;a href="http://foundation.zurb.com/"&gt;Foundation&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Javascript Frameworks&lt;/strong&gt; - These frameworks help in creating web application easier and follow best practices. Single Page Applications (SPAs) can be made efficiently with these frameworks. Examples are - &lt;a href="https://angularjs.org/"&gt;AngularJS&lt;/a&gt;,&lt;a href="http://emberjs.com/"&gt;Ember&lt;/a&gt;,&lt;a href="http://backbonejs.org/"&gt;Backbone&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Version Control&lt;/strong&gt; - Version Control is a must for every project. Suppose you are working on a feature in your project and you messed up something, now what you will do. With Version Control Systems (VCS) like &lt;strong&gt;git&lt;/strong&gt; you can view the changes you have made and go back to your previous state. &lt;a href="https://github.com/"&gt;Github&lt;/a&gt; is a web based hosting service for git repositories which makes collaboration between teams much easier. It gives features like forks and pull requests which helps in a big way to open source development.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Web Performance&lt;/strong&gt; - You have created your awesome website but if it takes long time to load people will not wait and leave your site. So you should optimize your images, Minify css and javscript to deliever fast and efficient websites to your users.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Browser Development tools&lt;/strong&gt; - Modern browsers are not just awesome for users But they are great for developers as well. These development tools help us to make changes to the DOM on the fly and see the changes. Debugging javascript is easier with these tools.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Building and Automation tools&lt;/strong&gt; - Who wants to do boring repetitive tasks. Tasks like running tests, optimize images, minify javascript and preparing code for deploying to production server can be automated with tools like &lt;a href="http://gruntjs.com/"&gt;Grunt&lt;/a&gt;, &lt;a href="http://gulpjs.com/"&gt;gulp&lt;/a&gt;. So you can focus only on building great web Applications.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Testing&lt;/strong&gt; - Testing is an essential part of creating web Applications. When you are working on a new feature you want to test your project so that you had not broken anything in the process. Examples of testing frameworks are &lt;a href="http://mochajs.org/"&gt;Mocha&lt;/a&gt;, &lt;a href="http://jasmine.github.io/"&gt;Jasmine&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Soft skills&lt;/strong&gt; - Soft skills are also important as technical skills. Soft skills help to communicate our ideas effectively with others, inspire others and see the big picture. Soft Skills include Strong Comminication, Agile Problem solving, Healthy passion, Self starting motivation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The above skills are demanded by Companies hiring Front End Developers. So whether you are just starting out or an expert in this field, You should add these skills to your tool set. The following resources will be helpful to learn -&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.udacity.com/" target="_blank"&gt;https://www.udacity.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.codecademy.com/" target="_blank"&gt;http://www.codecademy.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/user/DevTipsForDesigners" target="_blank"&gt;https://www.youtube.com/user/DevTipsForDesigners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://learncode.academy/" target="_blank"&gt;http://learncode.academy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tutsplus.com/" target="_blank"&gt;http://tutsplus.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Not understand some terms in this post go ahead and search &lt;a href="http://google.com" target="_blank"&gt;Google&lt;/a&gt; and you will find a number of resources. The community is there to help you in every step of your learning. You just need to start with confidence.&lt;/p&gt;</content><category term="html"></category><category term="css"></category><category term="javascript"></category><category term="front-end"></category><category term="web"></category><category term="tools"></category><category term="2015"></category></entry><entry><title>Why you should learn Python in 2015?</title><link href="https://parbhatpuri.com/Why-you-should-learn-python-in-2015.html" rel="alternate"></link><published>2015-01-04T23:00:00+05:30</published><updated>2015-01-04T23:00:00+05:30</updated><author><name>Parbhat Puri</name></author><id>tag:parbhatpuri.com,2015-01-04:/Why-you-should-learn-python-in-2015.html</id><summary type="html">&lt;p&gt;Python is the golden fish in the Programming languages world. It is being used everywhere from Scientific and Numeric to Web Programming.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Yesterday I saw a question on Quora - &lt;a href="https://www.quora.com/Is-Python-worth-it-to-learn-as-a-programming-language"&gt;Is Python worth it to learn as a programming language?&lt;/a&gt;. I answered the question on quora and decided to write a blog post on Importance of learning Python in 2015.&lt;/p&gt;
&lt;p&gt;Happy New Year 2015. &lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.python.org/"&gt;Python&lt;/a&gt; is the golden fish in the Programming languages world. It is being used everywhere from Scientific and Numeric to Web Programming. MIT - One of the Top universities in the world uses Python in its Introduction to Computer Science Course. It is being used by Biggest names in the industry like Google, YouTube, Quora, Pinterest, Instagram, Reddit, Redhat etc. &lt;/p&gt;
&lt;p&gt;You have a number of options after learning this powerful Programming language. It is easy to learn and code. The open source community behind Python is really awesome and working collectively to improve it. Without any further writing I will show you the importance of this language in the images below -&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="python-companies" src="http://i.imgur.com/BBADQ4P.png"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.python.org/about/apps/"&gt;Use Python for&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="python" src="http://i.imgur.com/u4JA6SR.png"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="python-percentages" src="http://i.imgur.com/ytryfJ2.png"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Jobs&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="python-graph-jobs" src="http://i.imgur.com/5oMliVZ.png"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="python-use" src="http://i.imgur.com/DDNDRQH.png"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Python is a great skill that will surely pay off in 2015. It's clean syntax gives you Super powers. &lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="python-xkcd" src="https://i.imgur.com/b6qQf8E.png"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;So go ahead and dive in the world of Python full of learning and Adventures.
&lt;br&gt;
Best learning Resource - &lt;a href="https://www.edx.org/course/introduction-computer-science-mitx-6-00-1x-0"&gt;6.00.1x introduction to computer science&lt;/a&gt; from MIT.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="python-keep-calm" src="http://i.imgur.com/VBOXm7Y.png"&gt;&lt;/center&gt;&lt;/p&gt;</content><category term="python"></category><category term="2015"></category><category term="Programming"></category></entry><entry><title>VirtualenvWrapper on top of Virtualenv</title><link href="https://parbhatpuri.com/virtualenvwrapper-on-top-of-virtualenv.html" rel="alternate"></link><published>2014-11-27T20:00:00+05:30</published><updated>2014-11-27T20:00:00+05:30</updated><author><name>Parbhat Puri</name></author><id>tag:parbhatpuri.com,2014-11-27:/virtualenvwrapper-on-top-of-virtualenv.html</id><summary type="html">&lt;p&gt;Virtualenv is a tool for creating isolated Python environment which means you can have separate python environments for your projects.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;What is Virtualenv?&lt;/h2&gt;
&lt;p&gt;Virtualenv is a tool for creating isolated Python environments which means you can have separate python environments for your projects.&lt;/p&gt;
&lt;p&gt;Lets keep it simple suppose you are working on a project which depends on any python package like &lt;strong&gt;Django == 1.6.5&lt;/strong&gt;. And wow the new version &lt;strong&gt;Django == 1.7&lt;/strong&gt; is launched with some cool features like migrations etc. You want to start a new project on Django == 1.7 but wait how you are gonna do that?&lt;/p&gt;
&lt;h4&gt;How to maintain two separate versions of Django.&lt;/h4&gt;
&lt;p&gt;The answer is simple use &lt;strong&gt;Virtualenv&lt;/strong&gt; to create separate python environments for them. Those two environments will be totally separated from each other as well as from the globally installed packages.&lt;/p&gt;
&lt;h4&gt;Installing Virtualenv&lt;/h4&gt;
&lt;p&gt;&lt;hr&gt;
The easiest way to install virtualenv is to use &lt;a href="http://pip.readthedocs.org/en/latest"&gt;pip&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install virtualenv
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Usage&lt;/h4&gt;
&lt;p&gt;&lt;hr&gt;
&lt;strong&gt;To create a Virtual environment&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ virtualenv ENV_NAME
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt; Activate the Virtual environment&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;source&lt;/span&gt; bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;But wait where is &lt;strike&gt;Virtualenv&lt;/strike&gt; VirtualenvWrapper&lt;/h2&gt;
&lt;h4&gt;Virtualenv Wrapper is the Hero&lt;/h4&gt;
&lt;p&gt;virtualenvwrapper is the extension to virtualenv. It makes the process of creating and managing virtual environments smoother and easier. It provides a set of commands which helps in managing multiple environments easily and remove conflicts.&lt;/p&gt;
&lt;h4&gt;Installing Virtualenvwrapper&lt;/h4&gt;
&lt;p&gt;&lt;hr&gt;
As usual the best way to install any python package is to use pip.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install virtualenvwrapper
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Some configuration&lt;/strong&gt;
&lt;hr&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vi ~/.bashrc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(maybe virtualenvwrapper.sh is in other location, change if necessary)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;export WORKON_HOME=$HOME/.virtualenvs
source /usr/local/bin/virtualenvwrapper.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Load file .bashrc&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;source ~/.bashrc
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Creating a Virtual Environment using Virtualenv Wrapper&lt;/h4&gt;
&lt;hr&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkvirtualenv env_name
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;center&gt;&lt;div class="imga"&gt;&lt;img src="https://i.imgur.com/eCXWgI8.png"&gt;&lt;/div&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h4&gt;Activating the Virtual environment&lt;/h4&gt;
&lt;hr&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ workon env_name
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can see the changes before the username. This indicates that your virtual
environment is activated.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="virtualenv" src="https://i.imgur.com/MytTSyR.png"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h4&gt;Installing and listing packages using pip&lt;/h4&gt;
&lt;hr&gt;

&lt;p&gt;&lt;center&gt;&lt;img alt="virtualenv" src="https://i.imgur.com/v0iftDF.png"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h4&gt;Deactivate Environment&lt;/h4&gt;
&lt;hr&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ deactivate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Great we have come to the end of this post.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;virtualenv is a great tool for any python project and virtualenvwrapper makes the process easier. For more details refer to their Official Documentation - &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://virtualenv.readthedocs.org/en/latest/"&gt;http://virtualenv.readthedocs.org/en/latest/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://virtualenvwrapper.readthedocs.org/en/latest"&gt;http://virtualenvwrapper.readthedocs.org/en/latest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Oh I forget something&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install have-a-great-development
&lt;/pre&gt;&lt;/div&gt;</content><category term="python"></category><category term="virtualenv"></category><category term="Programming"></category></entry><entry><title>Why use Linux for Python development?</title><link href="https://parbhatpuri.com/why-use-linux-for-python-development.html" rel="alternate"></link><published>2014-11-22T19:40:00+05:30</published><updated>2014-11-22T19:40:00+05:30</updated><author><name>Parbhat Puri</name></author><id>tag:parbhatpuri.com,2014-11-22:/why-use-linux-for-python-development.html</id><summary type="html">&lt;p&gt;Python is a high level programming language.The development time is precious so using Linux based operating systems makes the development easier and fun.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://www.python.org/"&gt;Python&lt;/a&gt; is a high level programming language. The development time is precious so using Linux based operating systems makes the development easier and fun.&lt;/p&gt;
&lt;p&gt;I had been using windows for a couple of months for my &lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt; Projects. Initially during my learning stage windows was working fine for me but as the knowledge and project size grew I faced many difficulties which I want to summarize here. I am not supporting any operating system here but want every Developer to understand the reasons for switching. For following reasons every Developer should switch to Linux based OS like &lt;a href="http://www.ubuntu.com/"&gt;Ubuntu&lt;/a&gt; for Python Development.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Some packages are &lt;strong&gt;not&lt;/strong&gt; available for windows, if they are available it will be difficult to configure them in your projects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you are working on a project in Django, flask and other frameworks you would like to &lt;strong&gt;deploy&lt;/strong&gt; it so it will be available for public to see. In more than 90% of the cases your deployment environment will be Linux based so its best to test your application locally on the same environment as in deployment because here you are allowed to make mistakes and improve.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Almost every tutorial on Python use Linux based systems like Ubuntu. These tutorials are by experts so it's good to follow best practices used by experienced developers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When your projects get complex its very easy to find Dependencies for your projects like extensions, libraries etc. in Linux based OS. In Windows you have to search for the right site to download the package and go through the hassle of installation and configuration. Sometimes the search for packages takes a lot of time, in Linux its just &lt;em&gt;&lt;strong&gt;"apt-get"&lt;/strong&gt;&lt;/em&gt; (or similar).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python comes pre-installed in Ubuntu and other versions so no need to install python on your system.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="python-linux" src="https://i.imgur.com/lhlh6Lx.png"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Switch to linux and use apt-get to install your packages&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Happy Coding.&lt;/p&gt;</content><category term="python"></category><category term="linux"></category><category term="windows"></category><category term="ubuntu"></category><category term="Programming"></category></entry><entry><title>Django (Python Web Framework) Tutorials</title><link href="https://parbhatpuri.com/django_tutorials.html" rel="alternate"></link><published>2014-07-18T10:20:00+05:30</published><updated>2014-07-18T19:30:00+05:30</updated><author><name>Parbhat Puri</name></author><id>tag:parbhatpuri.com,2014-07-18:/django_tutorials.html</id><summary type="html">&lt;p&gt;The Web framework for perfectionists with deadlines.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Django Tutorials&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;&lt;a href="https://www.djangoproject.com" target="_blank"&gt;Django&lt;/a&gt; is a high-level Python Web framework that encourages rapid development and clean, pragmatic design.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.6/intro/tutorial01/" target="_blank"&gt;Official Tutorial &lt;/a&gt; - It is the Official tutorial of django on the django site.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.tangowithdjango.com/" target="_blank"&gt;Tango with Django&lt;/a&gt; - A Good Introduction to the django terminology.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://gettingstartedwithdjango.com" target="_blank"&gt;Getting Started With Django&lt;/a&gt; - A video series to upgrade  from beginner to pro.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://twoscoopspress.org" target="_blank"&gt;Two Scoops of Django&lt;/a&gt; - A book covering the best practices in Django.&lt;/li&gt;
&lt;/ul&gt;</content><category term="python"></category><category term="django"></category><category term="web"></category></entry></feed>